What is dynamic polymorphism?
Dynamic polymorphism is the mechanism by which methods can be defined with the same name, return type, and parameters in the base class and derived classes.

The call to an overridden method is decided at the runtime.

Dynamic polymorphism example
Letâ€™s consider the example of the Shape class:

// Shape Class
class Shape {
  
  public double getArea() {
    return 0;
  }
  
}

// A Rectangle is a Shape
class Rectangle extends Shape {  // extended form the Shape class

  private double length;
  private double width;
  
  public Rectangle(double length, double width) {
    this.length = length;
    this.width = width;
  }

  public double getArea() {
    return this.width * this.length;
  }
  
}

// A Circle is a Shape
class Circle extends Shape {

  private double radius;
  
  public Circle(double radius) {
    this.radius = radius;
  }

  public double getArea() {
    return 3.13 * this.radius * this.radius;
  }


  public static void main(String args[]) {
    Shape[] shape = new Shape[2]; // Creating the shape array of size 2

    shape[0] = new Circle(3); // creating the circle object at index 0
    shape[1] = new Rectangle(2, 3); // creating the rectangle object at index 1

    System.out.println("Area of Circle: " + shape[0].getArea());
    System.out.println("Area of Rectangle: " + shape[1].getArea());
  }

}


A reference variable of the base class can be referred to the derived classes objects:

Shape obj1 = new Circle(3); 
Shape obj2 = new Rectangle(2, 3);

//.
//.
//.

obj1.getArea();
obj2.getArea();
 
 
 Explanation
obj1.getArea() will execute getArea() method of the subclass Circle class.

obj2.getArea() will execute getArea() method of the subclass Rectangle class.

obj1 is a reference to the Circle class, it calls the method of Circle class, as it points to a Circle object.

obj2 is a reference to the Rectangle class, it calls the method of Rectangle class, as it points to a Rectangle object.

This is decided during runtime and is, therefore, called dynamic or runtime polymorphism.


******Types of polymorphism
There are two types of polymorphism:

Static polymorphism is also known as compile time polymorphism.

Dynamic polymorphism is also known as runtime polymorphism.

ex-static poly
class Calculator {

  int add(int num1, int num2) {
    return num1 + num2;
  }

  int add(int num1, int num2, int num3) {
    return num1 + num2 + num3;
  }

  public static void main(String args[]) {
  
    Calculator obj = new Calculator();
    System.out.println("10 + 20 = " + obj.add(10, 20));
    System.out.println("10 + 20 + 30 = " + obj.add(10, 20, 30));
  }
  
}

ex- dynamic poly


// Shape Class
class Shape {

  public double getArea() {
    return 0;
  }
  
}

// A Rectangle is a Shape
class Rectangle extends Shape {   // extended form the Shape class

  private double length;
  private double width;
  
  public Rectangle(double length, double width) {
    this.length = length;
    this.width = width;
  }

  public double getArea() {
    return this.length * this.width;
  }
  
}

// A Circle is a Shape
class Circle extends Shape {

  private double radius;
  
  public Circle(double radius) {
    this.radius = radius;
  }

  public double getArea() {
    return this.radius * this.radius * 3.14;
  }


  public static void main(String args[]) {
    Shape[] shape = new Shape[2]; // Creating the shape array of size 2

    shape[0] = new Circle(2); // creating the circle object at index 0
    shape[1] = new Rectangle(2, 3); // creating the rectangle object at index 1

    System.out.println("Area of Circle: " + shape[0].getArea());
    System.out.println("Area of Rectangle: " + shape[1].getArea());
  }

}

Here, we have three classes Shape, Circle, and Rectangle. Shape is a parent class while Circle and Rectangle are the child classes. The child classes are overriding the method getArea() of the parent class. We have child classes objects assigned to the parent class reference. So to determine which method would be called, the type of the object would be determined at runtime. This is the reason it is also known as runtime polymorphism
