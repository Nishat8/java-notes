Inheritance provides a way to create a new class from an existing class. The new class is a specialized version of the existing class such that it inherits all the non-private fields (variables) and methods of the existing class. The existing class is used as a starting point or as a base to create the new class.


The Java Object class
The basic purpose of object-oriented programming is to enable a programmer to model the real world objects using a programming language.

In Java whenever we create a class, it inherits all the non-private methods and fields from the builtin Java Object class by default which makes it a very good example of inheritance in Java. The methods defined in the Object class come in very handy when you create new classes.


A new class is created based on an existing class in Inheritance, hence we use the terminology below for the new class and the existing class:

SuperClass (Parent Class or Base Class): This class allows the re-use of its non-private members in another class.
SubClass (Child Class or Derived Class): This class is the one that inherits from the superclass.
Note: A child class has all non-private characteristics of the parent class.

What does a child class have?
An object of the child class can use:

All non-private members defined in the child class.
All non-private members defined in the parent class.
Note: Some classes cannot be inherited. Such classes are defined with the keyword, final. An example of such a class is the built-in Integer class - this class cannot have derived classes.

The extends Keyword
In Java, we have to use the keyword extends to implement inheritance:

SubClass extends SuperClass{
//contents of SubClass
}
Let’s take an example of a Vehicle class as a base class and implement a Car class that will extend from this Vehicle class. As a Car IS A, Vehicle the implementation of inheritance relation between these classes will stand valid.

// Base Class Vehicle
class Vehicle {

  // Private Fields
  private String make; 
  private String color; 
  private int year;      
  private String model;   


  // Parameterized Constructor
  public Vehicle(String make, String color, int year, String model) {
    this.make = make;
    this.color = color;
    this.year = year;  
    this.model = model; 
  }

  // public method to print details
  public void printDetails() {
    System.out.println("Manufacturer: " + make);
    System.out.println("Color: " + color);
    System.out.println("Year: " + year);
    System.out.println("Model: " + model);
  }
  
}

// Derived Class Car
class Car extends Vehicle {

  // Private field
  private String bodyStyle;

  // Parameterized Constructor
  public Car(String make, String color, int year, String model, String bodyStyle) {
    super(make, color, year, model);  //calling parent class constructor
    this.bodyStyle = bodyStyle;       
  }

  public void carDetails() {  //details of car
    printDetails();         //calling method from parent class
    System.out.println("Body Style: " + bodyStyle);
  }
  
}

class Main {

  public static void main(String[] args) {
    Car elantraSedan = new Car("Hyundai", "Red", 2019, "Elantra", "Sedan"); //creation of car Object
    elantraSedan.carDetails(); //calling method to print details
  }
  
}

****Super *****

What is the super keyword?
this keyword in Java is used to refer to the instance of the current class.

In a similar fashion, the super keyword in Java is used to refer to the SuperClass members from inside the immediate Subclass. The use of super comes into play when we implement inheritance.

Use cases of the super keyword
The super keyword is used in three major contexts:

Accessing parent class fields
Consider the fields named as fuelCap defined inside a Vehicle class to keep track of the fuel capacity of a vehicle. Another class named as Car extends from this Vehicle class. We declare a field inside the Car class with the same name i.e. fuelCap but different value. Now if we want to refer to the fuelCap field of the SuperClass inside the Subclass, we will then have to use the super keyword.

Let’s understand this using a bit of code.

class Vehicle { //Base class vehicle  

  int fuelCap = 90; //fuelCap field inside SuperClass

} 


class Car extends Vehicle { // sub class Car extending from Vehicle

  int fuelCap = 50; //fuelCap field inside SubClass

  public void display() { 
    //accessing the field of parent class using super*/
    System.out.println("Fuel Capacity from the Vehicle class: " + super.fuelCap); 
    //without using super the field of current class shadows the field of parant class*/
    System.out.println("Fuel Capacity from the Car class: " + fuelCap); 

  } 

} 

class Main {

  public static void main(String[] args) { 
    Car corolla = new Car(); 
    corolla.display(); 
  } 

}


Calling a parent class method
Just like the fields, super is also used with the methods. Whenever a SuperClass and the immediate SubClass have any methods with the same name we use super to access the methods from the SuperClass inside the SubClass.

Let’s go through an example:
class Vehicle {          //Base class vehicle 

  public void display() {   //display method inside SuperClass
    System.out.println("I am from the Vehicle Class");
  }

} 

class Car extends Vehicle { // sub class Car extending from Vehicle

  public void display() { //display method inside SubClass
    System.out.println("I am from the Car Class");
  } 

  public void printOut(){
    System.out.println("The display() call with super:");
    super.display();  //calling the display() of Vehicle(SuperClass)
    System.out.println("The display() call without super:");
    display();        //calling the display() of the Car(SubClass)
  }

} 

class Main {

  public static void main(String[] args) {
    Car corolla = new Car(); 
    corolla.printOut(); 
  }

}


Using with constructors
Another very important use of the keyword super is to call the constructor of the SuperClass from inside of the constructor of the SubClass.

Important Note: When you create an Object of a SubClass type at the same time, an Object of SuperClass type is created by calling implicitly the constructor of SuperClass.

The syntax of the constructor call is as follows:

super();  //calls the (no argument) constructor if a no-argument constructor is defined in the SuperClass

super(parameters); //calls the parameterized constructor of the SuperClass with matching parameters from the SubClass constructor

The above two lines are the generalized syntax for the SuperClass constructor call.

The call to the SuperClass constructor using super() is usually the first line of code inside the constructor of the SubClass. If we do not call super() in the SubClass constructor, the default no-argument constructor of SuperClass is called automatically. The super(parameters) call has to be used if we want to call a parameterized constructor of the SuperClass.

Let’s look at an example of a constructor calling using super().

Note: The below code will give an error as there is no call to the SuperClass constructor from inside of the SubClass constructor.

class Vehicle {              //base class of vehicle
  
    private String make;    //
    private String color;   // Vehicle Fields
    private int year;       //
    private String model;   //


    public Vehicle(String make, String color, int year, String model) {
        this.make = make;    //
        this.color = color;  // Constructor of Vehicle
        this.year = year;    //
        this.model = model;  //
    }

    public void printDetails() {  //public method to print details
        System.out.println("Manufacturer: " + make);
        System.out.println("Color: " + color);
        System.out.println("Year: " + year);
        System.out.println("Model: " + model);
    }
  
}

class Car extends Vehicle {    //derived class of Car

    private String bodyStyle;  //Car field

    public Car(String make, String color, int year, String model, String bodyStyle) {
        //super(make, color, year, model);  //parent class constructor
        this.bodyStyle = bodyStyle;       
    }

    public void carDetails() {  //details of car
        printDetails();         //calling method from parent class
        System.out.println("Body Style: " + bodyStyle);
    }
  
}
class Main {

    public static void main(String[] args) {
        Car elantraSedan = new Car("Hyundai", "Red", 2019, "Elantra", "Sedan"); //creation of car Object
        elantraSedan.carDetails(); //calling method to print details
    }
  
}





